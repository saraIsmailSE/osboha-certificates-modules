{"ast":null,"code":"import { createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nvar _hoisted_1 = {\n  \"class\": \"col text-center\"\n};\n\nvar _hoisted_2 = /*#__PURE__*/_createElementVNode(\"div\", {\n  id: \"fluid-meter-3\"\n}, null, -1\n/* HOISTED */\n);\n\nvar _hoisted_3 = [_hoisted_2];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, _hoisted_3);\n}","map":{"version":3,"mappings":";;EACO,SAAM;;;8BACTA,oBAA8B,KAA9B,EAA8B;EAAzBC,EAAE,EAAC;AAAsB,CAA9B,EAAuB,IAAvB,EAAuB;AAAA;AAAvB;;kBAAAC;;uBADFC,oBAEM,KAFN,cAEMC,UAFN","names":["_createElementVNode","id","_hoisted_2","_createElementBlock","_hoisted_3"],"sourceRoot":"","sources":["C:\\Users\\someO\\Desktop\\vue\\osboha-template\\src\\components\\chart.vue"],"sourcesContent":["<template>\r\n  <div class=\"col  text-center\">\r\n    <div id=\"fluid-meter-3\"></div>\r\n  </div>\r\n\r\n</template>\r\n<script>\r\nexport default {\r\n  name: \"Chart\",\r\n  created() { },\r\n  props: {\r\n    percintage: {\r\n      required: true,\r\n    },\r\n  },\r\n  data() {\r\n    return {\r\n    }\r\n  },\r\n  methods: {\r\n    init: function (env) {\r\n      if (!env.targetContainer)\r\n        throw \"empty or invalid container\";\r\n\r\n      targetContainer = env.targetContainer;\r\n      fillPercentage = clamp(env.fillPercentage, 0, 100);\r\n\r\n      if (env.options) {\r\n        options.drawShadow = env.options.drawShadow === false ? false : true;\r\n        options.size = env.options.size;\r\n        options.drawBubbles = env.options.drawBubbles === false ? false : true;\r\n        options.borderWidth = env.options.borderWidth || options.borderWidth;\r\n        options.foregroundFluidColor = env.options.foregroundFluidColor || options.foregroundFluidColor;\r\n        options.backgroundFluidColor = env.options.backgroundFluidColor || options.backgroundFluidColor;\r\n        options.backgroundColor = env.options.backgroundColor || options.backgroundColor;\r\n        options.foregroundColor = env.options.foregroundColor || options.foregroundColor;\r\n\r\n        options.drawText = env.options.drawText === false ? false : true;\r\n        options.drawPercentageSign = env.options.drawPercentageSign === false ? false : true;\r\n        options.fontSize = env.options.fontSize || options.fontSize;\r\n        options.fontFamily = env.options.fontFamily || options.fontFamily;\r\n        options.fontFillStyle = env.options.fontFillStyle || options.fontFillStyle;\r\n        // fluid settings\r\n\r\n        if (env.options.foregroundFluidLayer) {\r\n          foregroundFluidLayer.fillStyle = env.options.foregroundFluidLayer.fillStyle || foregroundFluidLayer.fillStyle;\r\n          foregroundFluidLayer.angularSpeed = env.options.foregroundFluidLayer.angularSpeed || foregroundFluidLayer.angularSpeed;\r\n          foregroundFluidLayer.maxAmplitude = env.options.foregroundFluidLayer.maxAmplitude || foregroundFluidLayer.maxAmplitude;\r\n          foregroundFluidLayer.frequency = env.options.foregroundFluidLayer.frequency || foregroundFluidLayer.frequency;\r\n          foregroundFluidLayer.horizontalSpeed = env.options.foregroundFluidLayer.horizontalSpeed || foregroundFluidLayer.horizontalSpeed;\r\n        }\r\n\r\n        if (env.options.backgroundFluidLayer) {\r\n          backgroundFluidLayer.fillStyle = env.options.backgroundFluidLayer.fillStyle || backgroundFluidLayer.fillStyle;\r\n          backgroundFluidLayer.angularSpeed = env.options.backgroundFluidLayer.angularSpeed || backgroundFluidLayer.angularSpeed;\r\n          backgroundFluidLayer.maxAmplitude = env.options.backgroundFluidLayer.maxAmplitude || backgroundFluidLayer.maxAmplitude;\r\n          backgroundFluidLayer.frequency = env.options.backgroundFluidLayer.frequency || backgroundFluidLayer.frequency;\r\n          backgroundFluidLayer.horizontalSpeed = env.options.backgroundFluidLayer.horizontalSpeed || backgroundFluidLayer.horizontalSpeed;\r\n        }\r\n      }\r\n      bubblesLayer.init();\r\n      setupCanvas();\r\n      draw();\r\n    },\r\n    setPercentage(percentage) {\r\n      fillPercentage = clamp(percentage, 0, 100);\r\n    }\r\n\r\n  },\r\n};\r\n</script>\r\n"]},"metadata":{},"sourceType":"module"}