{"ast":null,"code":"import { createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nvar _hoisted_1 = {\n  \"class\": \"col text-center\"\n};\n\nvar _hoisted_2 = /*#__PURE__*/_createElementVNode(\"div\", {\n  id: \"fluid-meter-3\"\n}, null, -1\n/* HOISTED */\n);\n\nvar _hoisted_3 = [_hoisted_2];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, _hoisted_3);\n}","map":{"version":3,"mappings":";;EACO,SAAM;;;8BACTA,oBAA8B,KAA9B,EAA8B;EAAzBC,EAAE,EAAC;AAAsB,CAA9B,EAAuB,IAAvB,EAAuB;AAAA;AAAvB;;kBAAAC;;uBADFC,oBAEM,KAFN,cAEMC,UAFN","names":["_createElementVNode","id","_hoisted_2","_createElementBlock","_hoisted_3"],"sourceRoot":"","sources":["C:\\Users\\someO\\Desktop\\vue\\osboha-template\\src\\components\\chart.vue"],"sourcesContent":["<template>\r\n  <div class=\"col  text-center\">\r\n    <div id=\"fluid-meter-3\"></div>\r\n  </div>\r\n\r\n</template>\r\n<script>\r\nexport default {\r\n  name: \"Chart\",\r\n  created() { },\r\n  props: {\r\n    percintage: {\r\n      required: true,\r\n    },\r\n  },\r\n  data() {\r\n    return {\r\n      options: {\r\n        drawShadow: true,\r\n        drawText: true,\r\n        drawPercentageSign: true,\r\n        drawBubbles: true,\r\n        fontSize: \"70px\",\r\n        fontFamily: \"Arial\",\r\n        fontFillStyle: \"white\",\r\n        size: 300,\r\n        borderWidth: 25,\r\n        backgroundColor: \"#e2e2e2\",\r\n        foregroundColor: \"#fafafa\"\r\n      },\r\n      context,\r\n      targetContainer,\r\n      time: null,\r\n      dt: null,\r\n      currentFillPercentage: 0,\r\n      fillPercentage: 0,\r\n\r\n      //#region fluid context values\r\n      foregroundFluidLayer: {\r\n        fillStyle: \"purple\",\r\n        angle: 0,\r\n        horizontalPosition: 0,\r\n        angularSpeed: 0,\r\n        maxAmplitude: 9,\r\n        frequency: 30,\r\n        horizontalSpeed: -150,\r\n        initialHeight: 0\r\n      },\r\n      backgroundFluidLayer: {\r\n        fillStyle: \"pink\",\r\n        angle: 0,\r\n        horizontalPosition: 0,\r\n        angularSpeed: 140,\r\n        maxAmplitude: 12,\r\n        frequency: 40,\r\n        horizontalSpeed: 150,\r\n        initialHeight: 0\r\n      },\r\n\r\n\r\n    }\r\n  },\r\n  methods: {\r\n    drawFluidMask(layer) {\r\n      var x = 0;\r\n      var y = 0;\r\n      var amplitude = layer.maxAmplitude * Math.sin(layer.angle * Math.PI / 180);\r\n\r\n      this.context.beginPath();\r\n\r\n      this.context.lineTo(0, layer.initialHeight);\r\n\r\n      while (x < this.options.size) {\r\n        y = layer.initialHeight + amplitude * Math.sin((x + layer.horizontalPosition) / layer.frequency);\r\n        this.context.lineTo(x, y);\r\n        x++;\r\n      }\r\n      this.context.lineTo(x, options.size);\r\n      this.context.lineTo(0, options.size);\r\n      this.context.closePath();\r\n      this.context.clip();\r\n    },\r\n    drawBubblesLayer(dt) {\r\n      context.save();\r\n      for (var i = 0; i < bubblesLayer.bubbles.length; i++) {\r\n        var bubble = bubblesLayer.bubbles[i];\r\n\r\n        context.beginPath();\r\n        context.strokeStyle = 'white';\r\n        context.arc(bubble.x, bubble.y, bubble.r, 2 * Math.PI, false);\r\n        context.stroke();\r\n        context.closePath();\r\n\r\n        var currentSpeed = bubblesLayer.current * dt;\r\n\r\n        bubble.velX = Math.abs(bubble.velX) < Math.abs(bubblesLayer.current) ? bubble.velX + currentSpeed : bubblesLayer.current;\r\n        bubble.y = bubble.y - bubble.velY * dt;\r\n        bubble.x = bubble.x + (bubblesLayer.swing ? 0.4 * Math.cos(bubblesLayer.swing += 0.03) * bubblesLayer.swing : 0) + bubble.velX * 0.5;\r\n\r\n        // determine if current bubble is outside the safe area\r\n        var meterBottom = (options.size - (options.size - getMeterRadius()) / 2) - options.borderWidth;\r\n        var fluidAmount = currentFillPercentage * (getMeterRadius() - options.borderWidth * 2) / 100;\r\n\r\n        if (bubble.y <= meterBottom - fluidAmount) {\r\n          bubblesLayer.reset(bubble);\r\n        }\r\n\r\n      }\r\n      context.restore();\r\n    },\r\n    drawText() {\r\n\r\n      var text = this.options.drawPercentageSign ?\r\n        currentFillPercentage.toFixed(0) + \"%\" : currentFillPercentage.toFixed(0);\r\n\r\n      this.context.save();\r\n      this.context.font = getFontSize();\r\n      this.context.fillStyle = options.fontFillStyle;\r\n      this.context.textAlign = \"center\";\r\n      this.context.textBaseline = 'middle';\r\n      this.context.filter = \"drop-shadow(0px 0px 5px rgba(0,0,0,0.4))\"\r\n      this.context.fillText(text, this.options.size / 2, this.options.size / 2);\r\n      this.context.restore();\r\n    },\r\n    //#region helper methods\r\n    clamp(number, min, max) {\r\n      return Math.min(Math.max(number, min), max);\r\n    },\r\n    getMeterRadius() {\r\n      return options.size * 0.9;\r\n    },\r\n\r\n    random(min, max) {\r\n      var delta = max - min;\r\n      return max === min ? min : Math.random() * delta + min;\r\n    },\r\n\r\n    getFontSize() {\r\n      return this.options.fontSize + \" \" + this.options.fontFamily;\r\n    },\r\n    init: function (env) {\r\n      if (!env.targetContainer)\r\n        throw \"empty or invalid container\";\r\n\r\n      targetContainer = env.targetContainer;\r\n      fillPercentage = clamp(env.fillPercentage, 0, 100);\r\n\r\n      if (env.options) {\r\n        this.options.drawShadow = env.options.drawShadow === false ? false : true;\r\n        this.options.size = env.options.size;\r\n        this.options.drawBubbles = env.options.drawBubbles === false ? false : true;\r\n        this.options.borderWidth = env.options.borderWidth || this.options.borderWidth;\r\n        this.options.foregroundFluidColor = env.options.foregroundFluidColor || this.options.foregroundFluidColor;\r\n        this.options.backgroundFluidColor = env.options.backgroundFluidColor || this.options.backgroundFluidColor;\r\n        this.options.backgroundColor = env.options.backgroundColor || this.options.backgroundColor;\r\n        this.options.foregroundColor = env.options.foregroundColor || this.options.foregroundColor;\r\n\r\n        this.options.drawText = env.options.drawText === false ? false : true;\r\n        this.options.drawPercentageSign = env.options.drawPercentageSign === false ? false : true;\r\n        this.options.fontSize = env.options.fontSize || this.options.fontSize;\r\n        this.options.fontFamily = env.options.fontFamily || this.options.fontFamily;\r\n        this.options.fontFillStyle = env.options.fontFillStyle || this.options.fontFillStyle;\r\n        // fluid settings\r\n\r\n        if (env.options.this.foregroundFluidLayer) {\r\n          this.foregroundFluidLayer.fillStyle = env.options.this.foregroundFluidLayer.fillStyle || this.foregroundFluidLayer.fillStyle;\r\n          this.foregroundFluidLayer.angularSpeed = env.options.this.foregroundFluidLayer.angularSpeed || this.foregroundFluidLayer.angularSpeed;\r\n          this.foregroundFluidLayer.maxAmplitude = env.options.this.foregroundFluidLayer.maxAmplitude || this.foregroundFluidLayer.maxAmplitude;\r\n          this.foregroundFluidLayer.frequency = env.options.this.foregroundFluidLayer.frequency || this.foregroundFluidLayer.frequency;\r\n          this.foregroundFluidLayer.horizontalSpeed = env.options.this.foregroundFluidLayer.horizontalSpeed || this.foregroundFluidLayer.horizontalSpeed;\r\n        }\r\n\r\n        if (env.options.this.backgroundFluidLayer) {\r\n          this.backgroundFluidLayer.fillStyle = env.options.this.backgroundFluidLayer.fillStyle || this.backgroundFluidLayer.fillStyle;\r\n          this.backgroundFluidLayer.angularSpeed = env.options.this.backgroundFluidLayer.angularSpeed || this.backgroundFluidLayer.angularSpeed;\r\n          this.backgroundFluidLayer.maxAmplitude = env.options.this.backgroundFluidLayer.maxAmplitude || this.backgroundFluidLayer.maxAmplitude;\r\n          this.backgroundFluidLayer.frequency = env.options.this.backgroundFluidLayer.frequency || this.backgroundFluidLayer.frequency;\r\n          this.backgroundFluidLayer.horizontalSpeed = env.options.this.backgroundFluidLayer.horizontalSpeed || this.backgroundFluidLayer.horizontalSpeed;\r\n        }\r\n      }\r\n      bubblesLayer.init();\r\n      setupCanvas();\r\n      draw();\r\n    },\r\n    setPercentage(percentage) {\r\n      fillPercentage = clamp(percentage, 0, 100);\r\n    }\r\n\r\n  },\r\n};\r\n</script>\r\n"]},"metadata":{},"sourceType":"module"}