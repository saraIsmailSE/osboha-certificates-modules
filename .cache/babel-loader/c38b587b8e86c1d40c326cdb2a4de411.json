{"ast":null,"code":"import { createElementVNode as _createElementVNode, renderSlot as _renderSlot, normalizeClass as _normalizeClass, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nvar _hoisted_1 = [\"value\", \"name\", \"id\", \"checked\"];\nvar _hoisted_2 = [\"for\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", {\n    \"class\": _normalizeClass($props.className)\n  }, [_createElementVNode(\"input\", {\n    type: \"checkbox\",\n    value: $props.value,\n    \"class\": \"btn-check\",\n    name: $props.btnName,\n    id: $props.id,\n    autoComplete: \"off\",\n    checked: $setup.checkboxCheckValue($props.defaultChecked, $props.value),\n    onChange: _cache[0] || (_cache[0] = function ($event) {\n      return _ctx.$emit('onChange', $setup.onCheckboxUpdate($props.defaultChecked, $props.value), $props.btnName);\n    })\n  }, null, 40\n  /* PROPS, HYDRATE_EVENTS */\n  , _hoisted_1), _createElementVNode(\"label\", {\n    \"class\": _normalizeClass(\"btn btn-border btn-setting-panel d-block overflow-hidden  \".concat($props.labelClass)),\n    \"for\": $props.id\n  }, [_renderSlot(_ctx.$slots, \"default\")], 10\n  /* CLASS, PROPS */\n  , _hoisted_2)], 2\n  /* CLASS */\n  );\n}","map":{"version":3,"mappings":";;;;uBACEA,oBAKM,KALN,EAKM;IALA,SAAKC,gBAAEC,gBAAF;EAKL,CALN,GACEC,oBAAyO,OAAzO,EAAyO;IAAlOC,IAAI,EAAC,UAA6N;IAAjNC,KAAK,EAAEH,YAA0M;IAAnM,SAAM,WAA6L;IAAhLI,IAAI,EAAEJ,cAA0K;IAAhKK,EAAE,EAAEL,SAA4J;IAAxJM,YAAY,EAAC,KAA2I;IAApIC,OAAO,EAAEC,0BAAmBR,qBAAnB,EAAmCA,YAAnC,CAA2H;IAA/ES,QAAM;MAAA,OAAEC,WAAK,UAAL,EAAkBF,wBAAiBR,qBAAjB,EAAiCA,YAAjC,CAAlB,EAA2DA,cAA3D,CAAF;IAAA;EAAyE,CAAzO;;EAAA,eACAC,oBAEQ,OAFR,EAEQ;IAFA,SAAKF,oFAA+DC,iBAA/D,EAEL;IAFmF,OAAKA;EAExF,CAFR,GACEW,YAAQD,WAAR,EAAQ,SAAR,EADF;;EAAA,cAFF;;EAAA","names":["_createElementBlock","_normalizeClass","$props","_createElementVNode","type","value","name","id","autoComplete","checked","$setup","onChange","_ctx","_renderSlot"],"sourceRoot":"","sources":["C:\\Users\\someO\\Desktop\\vue\\osboha-template\\src\\components\\custom\\elements\\CheckboxInput.vue"],"sourcesContent":["<template>\n  <div :class=\"className\">\n    <input type=\"checkbox\" :value=\"value\" class=\"btn-check\" :name=\"btnName\" :id=\"id\" autoComplete=\"off\" :checked=\"checkboxCheckValue(defaultChecked, value)\" @change=\"$emit('onChange', onCheckboxUpdate(defaultChecked, value), btnName)\" />\n    <label :class=\"`btn btn-border btn-setting-panel d-block overflow-hidden  ${labelClass}`\" :for=\"id\">\n      <slot />\n    </label>\n  </div>\n</template>\n<script>\nexport default {\n  name: 'RadioInput',\n  props: {\n    className: {\n      type: String,\n      default: ''\n    },\n    btnName: {\n      type: String,\n      default: ''\n    },\n    id: {\n      type: String,\n      default: ''\n    },\n    value: {\n      type: String,\n      default: ''\n    },\n    labelTitle: {\n      type: String,\n      default: ''\n    },\n    labelClass: {\n      type: String,\n      default: ''\n    },\n    imgComponent: {\n      type: Boolean,\n      default: false\n    },\n    defaultChecked: {\n      type: Array,\n      default: () => []\n    }\n  },\n  setup () {\n    const checkboxCheckValue = (selector, value) => {\n      if (selector.includes(value)) {\n        return true\n      }\n      return false\n    }\n\n    const onCheckboxUpdate = (defaultChecked, value) => {\n      if (checkboxCheckValue(defaultChecked, value)) {\n        return [...defaultChecked.filter((item) => item !== value)]\n      } else {\n        return [...defaultChecked, value]\n      }\n    }\n    return { checkboxCheckValue, onCheckboxUpdate }\n  }\n}\n</script>\n"]},"metadata":{},"sourceType":"module"}