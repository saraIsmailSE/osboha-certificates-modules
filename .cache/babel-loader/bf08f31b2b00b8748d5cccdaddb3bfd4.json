{"ast":null,"code":"import { renderSlot as _renderSlot, normalizeClass as _normalizeClass, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nvar _hoisted_1 = [\"tabindex\", \"id\", \"aria-labelledby\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", {\n    \"class\": _normalizeClass(\"offcanvas offcanvas-\".concat($props.mainClass)),\n    tabindex: $props.tabindex,\n    id: $props.id,\n    \"aria-labelledby\": $props.ariaLabelled,\n    ref: \"offcanvas\"\n  }, [_renderSlot(_ctx.$slots, \"default\")], 10\n  /* CLASS, PROPS */\n  , _hoisted_1);\n}","map":{"version":3,"mappings":";;;uBACAA,oBAEM,KAFN,EAEM;IAFA,SAAKC,8CAAyBC,gBAAzB,EAEL;IAF6CC,QAAQ,EAAED,eAEvD;IAFkEE,EAAE,EAAEF,SAEtE;IAF2E,mBAAiBA,mBAE5F;IAF0GG,GAAG,EAAC;EAE9G,CAFN,GACIC,YAAOC,WAAP,EAAO,SAAP,EADJ;;EAAA","names":["_createElementBlock","_normalizeClass","$props","tabindex","id","ref","_renderSlot","_ctx"],"sourceRoot":"","sources":["C:\\Users\\someO\\Desktop\\vue\\osboha-template\\src\\components\\bootstrap\\offcanvas\\offcanvas.vue"],"sourcesContent":["<template>\n<div :class=\"`offcanvas offcanvas-${mainClass}`\"  :tabindex=\"tabindex\" :id=\"id\" :aria-labelledby=\"ariaLabelled\" ref=\"offcanvas\">\n    <slot/>\n</div>\n</template>\n<script>\nimport { Offcanvas } from 'bootstrap'\nexport default {\n  name: 'offcanvas',\n  props: {\n    mainClass: { type: String, default: 'bottom' },\n    backdrop: { type: String, default: 'false' },\n    tabindex: { type: Number },\n    id: { type: String },\n    ariaLabelled: { type: String }\n  },\n  mounted () {\n    this.elem = new Offcanvas(this.$refs.offcanvas)\n    this.initShow()\n    this.initShown()\n    this.initHide()\n    this.initHidden()\n  },\n  methods: {\n    initShow () {\n      this.$refs.offcanvas.addEventListener('show.bs.offcanvas', () => {\n        this.$emit('show')\n      })\n    },\n    initShown () {\n      this.$refs.offcanvas.addEventListener('shown.bs.offcanvas', () => {\n        this.$emit('shown')\n      })\n    },\n    initHide () {\n      this.$refs.offcanvas.addEventListener('hide.bs.offcanvas', () => {\n        this.$emit('hide')\n      })\n    },\n    initHidden () {\n      this.$refs.offcanvas.addEventListener('hidden.bs.offcanvas', () => {\n        this.$emit('hidden')\n      })\n    },\n    destroyShow () {\n      this.$refs.offcanvas.removeListener('show.bs.offcanvas')\n    },\n    destroyShown () {\n      this.$refs.offcanvas.removeListener('shown.bs.offcanvas')\n    },\n    destroyHide () {\n      this.$refs.offcanvas.removeListener('hide.bs.offcanvas')\n    },\n    destroyHidden () {\n      this.$refs.offcanvas.removeListener('hidden.bs.offcanvas')\n    }\n  }\n}\n</script>\n"]},"metadata":{},"sourceType":"module"}