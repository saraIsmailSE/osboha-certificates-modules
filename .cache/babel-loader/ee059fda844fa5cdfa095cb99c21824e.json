{"ast":null,"code":"import { toDisplayString as _toDisplayString, renderSlot as _renderSlot, createTextVNode as _createTextVNode, resolveDynamicComponent as _resolveDynamicComponent, normalizeClass as _normalizeClass, withCtx as _withCtx, openBlock as _openBlock, createBlock as _createBlock } from \"vue\";\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createBlock(_resolveDynamicComponent($props.tag), {\n    type: $props.type,\n    role: $props.role,\n    \"data-bs-container\": \"body\",\n    tabindex: $props.tabindex,\n    \"class\": _normalizeClass(\"btn \".concat($props.className)),\n    \"data-bs-toggle\": \"popover\",\n    \"data-bs-placement\": $props.popoverPlacement,\n    title: $props.popoverTitle,\n    \"data-bs-content\": $props.popoverContent,\n    ref: \"popover\",\n    \"data-trigger\": $props.popoverTrigger\n  }, {\n    \"default\": _withCtx(function () {\n      return [_createTextVNode(_toDisplayString($props.popoverText) + \" \", 1), _renderSlot(_ctx.$slots, \"default\")];\n    }),\n    _: 3\n  }, 8, [\"type\", \"role\", \"tabindex\", \"class\", \"data-bs-placement\", \"title\", \"data-bs-content\", \"data-trigger\"]);\n}","map":{"version":3,"mappings":";;uBACEA,aAeYC,yBAdPC,UAcO,CAfZ,EACQ;IACPC,IAAI,EAAED,WADC;IAEPE,IAAI,EAAEF,WAFC;IAGR,qBAAkB,MAHV;IAIPG,QAAQ,EAAEH,eAJH;IAKP,SAAKI,8BAASJ,gBAAT,EALE;IAMR,kBAAe,SANP;IAOP,qBAAmBA,uBAPZ;IAQPK,KAAK,EAAEL,mBARA;IASP,mBAAiBA,qBATV;IAURM,GAAG,EAAC,SAVI;IAWP,gBAAcN;EAXP,CADR;wBAaI;MAAA,OAAe,mCAAbA,sBAAa,KACf,EADe,EACfO,YAAOC,WAAP,EAAO,SAAP,CADe,CAAf;IAAA;;GAbJ","names":["_createBlock","_resolveDynamicComponent","$props","type","role","tabindex","_normalizeClass","title","ref","_renderSlot","_ctx"],"sourceRoot":"","sources":["C:\\Users\\someO\\Desktop\\vue\\osboha-template\\src\\components\\bootstrap\\popover\\popover.vue"],"sourcesContent":["<template>\n  <component\n  :is=\"tag\"\n  :type=\"type\"\n  :role=\"role\"\n  data-bs-container=\"body\"\n  :tabindex=\"tabindex\"\n  :class=\"`btn ${className}`\"\n  data-bs-toggle=\"popover\"\n  :data-bs-placement=\"popoverPlacement\"\n  :title=\"popoverTitle\"\n  :data-bs-content=\"popoverContent\"\n  ref=\"popover\"\n  :data-trigger=\"popoverTrigger\">\n      {{popoverText}}\n      <slot/>\n  </component>\n</template>\n<script>\nimport { Popover } from 'bootstrap'\nexport default {\n  name: 'popover',\n  props: {\n    tag: { type: String, default: 'button' },\n    type: { type: String, default: 'button' },\n    role: { type: String, default: '' },\n    tabindex: { type: Number, default: 0 },\n    className: { type: String },\n    popoverPlacement: { type: String },\n    popoverTitle: { type: String },\n    popoverContent: { type: String },\n    popoverTrigger: { type: String, default: '' },\n    popoverText: { type: String }\n  },\n  mounted () {\n    this.elem = new Popover(this.$refs.popover)\n    this.initShow()\n    this.initShown()\n    this.initHide()\n    this.initHidden()\n    this.initInserted()\n  },\n  methods: {\n    initShow () {\n      this.$refs.popover.addEventListener('show.bs.popover', () => {\n        this.$emit('show')\n      })\n    },\n    initShown () {\n      this.$refs.popover.addEventListener('shown.bs.popover', () => {\n        this.$emit('shown')\n      })\n    },\n    initHide () {\n      this.$refs.popover.addEventListener('hide.bs.popover', () => {\n        this.$emit('hide')\n      })\n    },\n    initHidden () {\n      this.$refs.popover.addEventListener('hidden.bs.popover', () => {\n        this.$emit('hidden')\n      })\n    },\n    initInserted () {\n      this.$refs.popover.addEventListener('inserted.bs.popover', () => {\n        this.$emit('inserted')\n      })\n    },\n    destroyShow () {\n      this.$refs.popover.removeListener('show.bs.popover')\n    },\n    destroyShown () {\n      this.$refs.popover.removeListener('shown.bs.popover')\n    },\n    destroyHide () {\n      this.$refs.popover.removeListener('hide.bs.popover')\n    },\n    destroyHidden () {\n      this.$refs.popover.removeListener('hidden.bs.popover')\n    },\n    destroyInserted () {\n      this.$refs.popover.removeListener('inserted.bs.popover')\n    }\n  }\n}\n</script>\n"]},"metadata":{},"sourceType":"module"}