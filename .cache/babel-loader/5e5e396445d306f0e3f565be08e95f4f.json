{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/someO/Desktop/vue/osboha-template/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"C:/Users/someO/Desktop/vue/osboha-template/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport \"core-js/modules/es.array.splice.js\";\nimport useVuelidate from \"@vuelidate/core\";\nimport { required, minLength } from \"@vuelidate/validators\";\nimport questionServices from '../../api/questionServices';\nexport default {\n  name: \"UpdateQuestion\",\n  created: function created() {\n    this.questionForm.question = this.questionToupdate.question;\n    this.questionForm.starting_page = this.questionToupdate.starting_page;\n    this.questionForm.ending_page = this.questionToupdate.ending_page;\n    this.questionForm.quotes = this.questionToupdate.quotation;\n    console.log(this.questionToupdate);\n  },\n  setup: function setup() {\n    return {\n      v$: useVuelidate()\n    };\n  },\n  props: {\n    questionToupdate: {\n      type: [Object],\n      required: true\n    },\n    book: {\n      type: [Object],\n      required: true\n    }\n  },\n  data: function data() {\n    return {\n      questionForm: {\n        question: '',\n        starting_page: \"\",\n        ending_page: \"\",\n        user_book_id: this.$route.params.id,\n        quotes: [{\n          text: ''\n        }]\n      }\n    };\n  },\n  validations: function validations() {\n    return {\n      questionForm: {\n        question: {\n          required: required\n        },\n        starting_page: {\n          required: required\n        },\n        ending_page: {\n          required: required\n        },\n        quotes: {\n          required: required,\n          minLength: minLength(1),\n          $each: {\n            text: {\n              minLength: minLength(2)\n            }\n          }\n        }\n      }\n    };\n  },\n  methods: {\n    addField: function addField(value, fieldType) {\n      fieldType.push({\n        text: \"\"\n      });\n    },\n    removeField: function removeField(index, fieldType) {\n      fieldType.splice(index, 1);\n    },\n    submitQuestionForm: function submitQuestionForm() {\n      var _this = this;\n\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var question;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _this.v$.$touch();\n\n                if (_this.v$.questionForm.$invalid) {\n                  _context.next = 10;\n                  break;\n                }\n\n                _context.next = 4;\n                return questionServices.updateQuestion(_this.questionForm, _this.questionToupdate.id);\n\n              case 4:\n                question = _context.sent;\n                _this.questionForm.question = \"\";\n                _this.questionForm.pageEnd = \"\";\n                _this.questionForm.pageStart = \"\";\n                _this.questionForm.quotes = [{\n                  text: ''\n                }];\n\n                _this.v$.questionForm.$reset();\n\n              case 10:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }))();\n    }\n  }\n};","map":{"version":3,"mappings":"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","names":["useVuelidate","required","minLength","questionServices","name","created","questionForm","question","questionToupdate","starting_page","ending_page","quotes","quotation","console","log","setup","v$","props","type","Object","book","data","user_book_id","$route","params","id","text","validations","$each","methods","addField","value","fieldType","push","removeField","index","splice","submitQuestionForm","$touch","$invalid","updateQuestion","pageEnd","pageStart","$reset"],"sourceRoot":"","sources":["C:\\Users\\someO\\Desktop\\vue\\osboha-template\\src\\components\\Questions\\UpdateQuestion.vue"],"sourcesContent":["<template>\r\n  <form @submit.prevent=\"submitQuestionForm\" class=\"post-text ml-3 w-100 row\">\r\n    <div class=\"form-group col-6\">\r\n      <select v-model=\"v$.questionForm.starting_page.$model\" class=\"form-select\" data-trigger\r\n        name=\"choices-single-default\" id=\"choices-single-default\">\r\n        <option value=\"\">اختر صفحة البداية</option>\r\n        <option v-for=\"(i, index) in book.pages\" :key=\"index\" :value=\"i\">\r\n          {{ i }}\r\n        </option>\r\n      </select>\r\n      <small style=\"color:red;\" v-if=\"v$.questionForm.starting_page.$error\">الرجاء قم بادخال صفحة\r\n        البداية</small>\r\n    </div>\r\n    <div class=\"form-group col-6\">\r\n\r\n      <select class=\"form-select\" v-model=\"v$.questionForm.ending_page.$model\" data-trigger\r\n        name=\"choices-single-default\" id=\"choices-single-default\">\r\n        <option value=\"\">اختر صفحة النهاية</option>\r\n        <option v-for=\"(i, index) in book.pages\" :key=\"index\" :value=\"i\">\r\n          {{ i }}\r\n        </option>\r\n      </select>\r\n      <small style=\"color:red;\" v-if=\"v$.questionForm.ending_page.$error\">الرجاء قم بادخال صفحة\r\n        النهاية</small>\r\n    </div>\r\n\r\n    <div class=\"form-group\">\r\n      <textarea rows=\"5\" placeholder=\"... اكتب سؤالًا \" class=\"rounded form-control\" id=\"bookQuestion\"\r\n        v-model=\"v$.questionForm.question.$model\"></textarea>\r\n      <small style=\"color:red;\" v-if=\"v$.questionForm.question.$error\">الرجاء قم بادخال السؤال </small>\r\n    </div>\r\n    <div>\r\n      <h4>كيف أحدد الاقتباسات</h4>\r\n      <hr>\r\n      <div class=\"col-12\">\r\n        <p>\r\n          يعتبر الاقتباس من المحسنات اللفظية، وهو حفظك للأقوال المأثورة عن الشخصيات المعروفة وأقوالهم، وخلال\r\n          الكتاب ستجد أن هناك جمل مهمة جدا تلخص أفكارًا أساسية في الكتاب. قم بتحديد أهم الاقتباسات داخل هذا\r\n          الكتاب لتقوم بحفظها فهي تساعدك على إجابة الأسئلة المعرفية وتعينك على الاستشهاد بها لإثبات وجهة نظر\r\n          الكاتب </p>\r\n      </div>\r\n    </div>\r\n    <div class=\"form-group\">\r\n\r\n      <textarea rows=\"5\" placeholder=\"... اكتب اقتباسًا \" v-for=\"(v,index) in questionForm.quotes\" :key=\"index\"\r\n        class=\"rounded form-control mt-2\" id=\"bookQuote\" v-model=\"v.text\">\r\n                </textarea>\r\n      <small style=\"color:red;\" v-if=\"v$.questionForm.question.$error\">الرجاء قم بادخال اقتباس واحد على الاقل\r\n      </small>\r\n      <hr>\r\n      <a class=\"btn btn-primary rounded-pill mb-3 me-1\" @click=\"addField(textarea, questionForm.quotes)\">\r\n        اضافة اقتباس\r\n      </a>\r\n      <a class=\"btn btn-danger rounded-pill mb-3 me-1\" v-show=\"questionForm.quotes && questionForm.quotes.length > 1\"\r\n        @click=\"removeField(index, questionForm.quotes)\">\r\n        حذف اقتباس\r\n      </a>\r\n\r\n\r\n    </div>\r\n    <input type=\"submit\" value=\"أضافة\" href=\"javascript:void(0);\" class=\"btn btn-primary d-block mt-3\" />\r\n  </form>\r\n</template>\r\n<script>\r\nimport useVuelidate from \"@vuelidate/core\";\r\nimport { required, minLength } from \"@vuelidate/validators\";\r\nimport questionServices from '../../api/questionServices'\r\nexport default {\r\n  name: \"UpdateQuestion\",\r\n  created() {\r\n    this.questionForm.question = this.questionToupdate.question\r\n    this.questionForm.starting_page = this.questionToupdate.starting_page\r\n    this.questionForm.ending_page = this.questionToupdate.ending_page\r\n    this.questionForm.quotes = this.questionToupdate.quotation\r\n    console.log(this.questionToupdate)\r\n  },\r\n  setup() {\r\n    return { v$: useVuelidate() };\r\n  },\r\n  props: {\r\n    questionToupdate: {\r\n      type: [Object],\r\n      required: true,\r\n    },\r\n    book: {\r\n      type: [Object],\r\n      required: true,\r\n    },\r\n\r\n  },\r\n  data() {\r\n    return {\r\n      questionForm: {\r\n        question: '',\r\n        starting_page: \"\",\r\n        ending_page: \"\",\r\n        user_book_id: this.$route.params.id,\r\n        quotes: [\r\n          { text: '' }\r\n        ]\r\n      },\r\n    };\r\n  },\r\n  validations() {\r\n    return {\r\n      questionForm: {\r\n        question: {\r\n          required\r\n        }, starting_page: {\r\n          required\r\n        }, ending_page: {\r\n          required\r\n        }, quotes: {\r\n          required,\r\n          minLength: minLength(1),\r\n          $each: {\r\n            text: {\r\n\r\n              minLength: minLength(2)\r\n            }\r\n          }\r\n        }\r\n      }\r\n    };\r\n  },\r\n  methods: {\r\n    addField(value, fieldType) {\r\n\r\n      fieldType.push({ text: \"\" });\r\n    },\r\n    removeField(index, fieldType) {\r\n      fieldType.splice(index, 1);\r\n    },\r\n    async submitQuestionForm() {\r\n      this.v$.$touch();\r\n\r\n      if (!this.v$.questionForm.$invalid) {\r\n        const question = await questionServices.updateQuestion(this.questionForm, this.questionToupdate.id);\r\n        this.questionForm.question = \"\";\r\n        this.questionForm.pageEnd = \"\";\r\n        this.questionForm.pageStart = \"\";\r\n        this.questionForm.quotes = [{ text: '' }];\r\n        this.v$.questionForm.$reset()\r\n      }\r\n    },\r\n\r\n  },\r\n};\r\n</script>\r\n"]},"metadata":{},"sourceType":"module"}